{
	"name": "code-d",
	"displayName": "D Programming Language (code-d)",
	"description": "auto-complete, snippets, linter and formatter for dlang",
	"version": "0.19.0",
	"publisher": "webfreak",
	"repository": {
		"type": "git",
		"url": "https://github.com/Pure-D/code-d.git"
	},
	"icon": "images/dlogo-square.png",
	"license": "MIT",
	"engines": {
		"vscode": "^1.29.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Linters",
		"Formatters",
		"Other"
	],
	"activationEvents": [
		"onLanguage:d",
		"onLanguage:dml",
		"workspaceContains:dub.json",
		"workspaceContains:dub.sdl",
		"onCommand:code-d.switchConfiguration",
		"onCommand:code-d.switchArchType",
		"onCommand:code-d.switchBuildType",
		"onCommand:code-d.switchCompiler",
		"onCommand:code-d.killServer",
		"onCommand:code-d.restartServer",
		"onCommand:code-d.reloadImports",
		"onCommand:code-d.stop",
		"onCommand:code-d.uploadSelection",
		"onCommand:code-d.insertDscanner",
		"onCommand:code-d.rdmdCurrent",
		"onCommand:code-d.generateCoverageReport",
		"onCommand:code-d.showGCCalls",
		"onCommand:dub.openSettingsEditor",
		"onCommand:dub.closeSettingsEditor",
		"onCommand:code-d.createProject",
		"onCommand:code-d.addImport",
		"onCommand:code-d.searchDocs",
		"onCommand:code-d.convertDubRecipe"
	],
	"main": "./out/src/extension",
	"keywords": [
		"d",
		"dlang",
		"d language",
		"code-d",
		"serve-d",
		"d programming"
	],
	"bugs": {
		"email": "code-d@webfreak.org",
		"url": "https://github.com/Pure-D/code-d/issues"
	},
	"contributes": {
		"languages": [
			{
				"id": "d",
				"extensions": [
					".d",
					".di"
				],
				"aliases": [
					"D",
					"Dlang"
				],
				"firstLine": "^#!.*(dub|rdmd)",
				"configuration": "./lang-configs/d.json"
			},
			{
				"id": "dpp",
				"extensions": [
					".dpp",
					".d++"
				],
				"aliases": [
					"D++"
				],
				"configuration": "./lang-configs/d.json"
			},
			{
				"id": "dscript",
				"aliases": [
					"arsd.DScript"
				],
				"extensions": [
					".dscript",
					".ds"
				],
				"configuration": "./lang-configs/general.json"
			},
			{
				"id": "dml",
				"aliases": [
					"DlangUI Markup Language"
				],
				"extensions": [
					".dml"
				],
				"configuration": "./lang-configs/general.json"
			},
			{
				"id": "sdl",
				"aliases": [
					"SDL",
					"Simple Declarative Language"
				],
				"extensions": [
					".sdl"
				],
				"configuration": "./lang-configs/general.json"
			},
			{
				"id": "diet",
				"aliases": [
					"Diet"
				],
				"extensions": [
					".dt"
				],
				"configuration": "./lang-configs/diet.json"
			}
		],
		"grammars": [
			{
				"language": "d",
				"scopeName": "source.d",
				"path": "./syntaxes/d.json"
			},
			{
				"language": "dscript",
				"scopeName": "source.dscript",
				"path": "./syntaxes/d.json"
			},
			{
				"language": "dml",
				"scopeName": "source.dml",
				"path": "./syntaxes/dml.json"
			},
			{
				"language": "sdl",
				"scopeName": "source.sdl",
				"path": "./syntaxes/sdl.json"
			},
			{
				"language": "diet",
				"scopeName": "source.diet",
				"path": "./syntaxes/diet.json"
			}
		],
		"snippets": [
			{
				"language": "d",
				"path": "./snippets/d.json"
			}
		],
		"configuration": {
			"title": "D configuration",
			"type": "object",
			"properties": {
				"d.servedPath": {
					"type": "string",
					"scope": "window",
					"default": "serve-d",
					"description": "Path of the serve-d executable. Path can be omitted if in $PATH or installed using code-d"
				},
				"d.stdlibPath": {
					"scope": "resource",
					"oneOf": [
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						{
							"type": "string"
						}
					],
					"defaultSnippets": [
						{
							"label": "Choose based on platform",
							"body": "auto"
						},
						{
							"label": "Linux Default",
							"body": [
								"/usr/include/dmd/druntime/import",
								"/usr/include/dmd/phobos"
							]
						},
						{
							"label": "ArchLinux Default",
							"body": [
								"/usr/include/dlang/dmd"
							]
						},
						{
							"label": "Windows Default",
							"body": [
								"C:\\D\\dmd2\\src\\druntime\\import",
								"C:\\D\\dmd2\\src\\phobos"
							]
						},
						{
							"label": "OSX Default",
							"body": [
								"/Library/D/dmd/src/druntime/import",
								"/Library/D/dmd/src/phobos"
							]
						}
					],
					"description": "Array of paths to phobos and D runtime for automatic inclusion for auto completion"
				},
				"d.dcdClientPath": {
					"type": "string",
					"scope": "resource",
					"default": "dcd-client",
					"description": "Path of the dcd-client executable. Path can be omitted if in $PATH or installed using code-d"
				},
				"d.dcdServerPath": {
					"type": "string",
					"scope": "resource",
					"default": "dcd-server",
					"description": "Path of the dcd-server executable. Path can be omitted if in $PATH or installed using code-d"
				},
				"d.dubPath": {
					"type": "string",
					"scope": "resource",
					"default": "dub",
					"description": "Path of the dub executable. Path can be omitted if in $PATH or installed using code-d"
				},
				"d.dmdPath": {
					"type": "string",
					"scope": "resource",
					"default": "dmd",
					"description": "Path of the dmd executable. Path can be omitted if in $PATH"
				},
				"d.enableLinting": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "If code-d should watch for file saves and report static analysis. Might interfere with other lint plugins or settings."
				},
				"d.enableSDLLinting": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "If code-d should report errors in your dub.sdl file."
				},
				"d.enableDubLinting": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "If code-d should build on save to check for compile errors."
				},
				"d.enableStaticLinting": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "If code-d should use DScanner to statically lint files."
				},
				"d.enableAutoComplete": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Start dcd-server at startup and complete using dcd-client."
				},
				"d.enableFormatting": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "If the default formatting keybind should call dfmt on D files."
				},
				"d.enableDMDImportTiming": {
					"type": "boolean",
					"scope": "resource",
					"default": false,
					"description": "Add code lenses on import statements executing a dmd instance trying to compile that import statement to get the impact on compilation time by this import."
				},
				"d.enableCoverageDecoration": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Automatically highlight tested/untested converage lines with light red/green backgrounds per line for *.lst files."
				},
				"d.enableGCProfilerDecorations": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Automatically embed code lenses for all GC allocations based on profilegc.log."
				},
				"d.neverUseDub": {
					"type": "boolean",
					"scope": "resource",
					"default": false,
					"description": "If this is true then a custom workspace where you manually provide the import paths will always be used instead of dub. See d.projectImportPaths for setting import paths then. This is discouraged as it will remove most features like packages, building & compiler linting. If this is a standalone project with no external dependencies with a custom build system then this should be true."
				},
				"d.projectImportPaths": {
					"type": "array",
					"scope": "resource",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Setting for import paths in your workspace if not using dub. This will replace other paths. Its recommended to set this in your workspace settings instead of your user settings to keep it separate for each project."
				},
				"d.dubConfiguration": {
					"type": "string",
					"scope": "resource",
					"description": "Sets the default configuration to use when starting up"
				},
				"d.dubArchType": {
					"type": "string",
					"scope": "resource",
					"description": "Sets the default arch type to use when starting up"
				},
				"d.dubBuildType": {
					"type": "string",
					"scope": "resource",
					"description": "Sets the default build type to use when starting up"
				},
				"d.dubCompiler": {
					"type": "string",
					"scope": "resource",
					"description": "Sets the default compiler to use when starting up"
				},
				"d.overrideDfmtEditorconfig": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Uses dfmt config options & vscode editor config instead of .editorconfig because of inconsistencies with the vscode editor settings."
				},
				"d.aggressiveUpdate": {
					"type": "boolean",
					"scope": "application",
					"default": true,
					"description": "Update/install outdated & missing tools without confirmation"
				},
				"d.argumentSnippets": {
					"type": "boolean",
					"scope": "resource",
					"default": false,
					"description": "When autocompleting functions automatically insert the signature as snippet which can be navigated using tab."
				},
				"d.completeNoDupes": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Merge all symbols inside auto completion with the same name together."
				},
				"d.betaStream": {
					"type": "boolean",
					"scope": "application",
					"default": false,
					"description": "Always get latest serve-d commit when starting vscode and an update is available."
				},
				"d.scanAllFolders": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Initialize an instance for every dub.sdl and dub.json file in all folders."
				},
				"d.disabledRootGlobs": {
					"type": "array",
					"scope": "resource",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Array of globs for disabling/preventing project instances by the d.scanAllFolders setting."
				},
				"d.extraRoots": {
					"type": "array",
					"scope": "resource",
					"items": {
						"type": "string"
					},
					"default": [],
					"description": "Array of workspace-relative (or absolute) folders to force start a project instance in."
				},
				"d.alwaysShowDubStatusButtons": {
					"type": "boolean",
					"scope": "resource",
					"default": false,
					"description": "Switch to always show dub Configuration/Arch Type/Build Type/Compiler buttons in dub projects and not just when a D file is open."
				},
				"d.alwaysShowCoverageStatus": {
					"type": "boolean",
					"scope": "resource",
					"default": false,
					"description": "Switch to always show coverage status when available through lst files and not just when a D file is open."
				},
				"dfmt.alignSwitchStatements": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Not yet implemented (on dfmt side)"
				},
				"dfmt.braceStyle": {
					"type": "string",
					"scope": "resource",
					"enum": [
						"allman",
						"otbs",
						"stroustrup"
					],
					"default": "allman",
					"description": "See Wikipedia https://en.wikipedia.org/wiki/Brace_style"
				},
				"dfmt.outdentAttributes": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Not yet implemented (on dfmt side)"
				},
				"dfmt.spaceAfterCast": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Insert space after the closing paren of a cast expression."
				},
				"dfmt.splitOperatorAtLineEnd": {
					"type": "boolean",
					"scope": "resource",
					"default": false,
					"description": "Place operators on the end of the previous line when splitting lines."
				},
				"dfmt.selectiveImportSpace": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Insert space after the module name and before the : for selective imports."
				},
				"dfmt.compactLabeledStatements": {
					"type": "boolean",
					"scope": "resource",
					"default": true,
					"description": "Place labels on the same line as the labeled switch, for, foreach, or while statement."
				},
				"dfmt.templateConstraintStyle": {
					"type": "string",
					"scope": "resource",
					"enum": [
						"conditional_newline_indent",
						"conditional_newline",
						"always_newline",
						"always_newline_indent"
					],
					"default": "conditional_newline_indent",
					"description": "Control the formatting of template constraints."
				},
				"dscanner.ignoredKeys": {
					"type": "array",
					"scope": "resource",
					"items": {
						"type": "string",
						"enum": [
							"dscanner.bugs.backwards_slices",
							"dscanner.bugs.if_else_same",
							"dscanner.bugs.logic_operator_operands",
							"dscanner.bugs.self_assignment",
							"dscanner.confusing.argument_parameter_mismatch",
							"dscanner.confusing.brexp",
							"dscanner.confusing.builtin_property_names",
							"dscanner.confusing.constructor_args",
							"dscanner.confusing.function_attributes",
							"dscanner.confusing.lambda_returns_lambda",
							"dscanner.confusing.logical_precedence",
							"dscanner.confusing.struct_constructor_default_args",
							"dscanner.deprecated.delete_keyword",
							"dscanner.deprecated.floating_point_operators",
							"dscanner.if_statement",
							"dscanner.performance.enum_array_literal",
							"dscanner.style.allman",
							"dscanner.style.alias_syntax",
							"dscanner.style.doc_missing_params",
							"dscanner.style.doc_missing_returns",
							"dscanner.style.doc_non_existing_params",
							"dscanner.style.explicitly_annotated_unittest",
							"dscanner.style.has_public_example",
							"dscanner.style.imports_sortedness",
							"dscanner.style.long_line",
							"dscanner.style.number_literals",
							"dscanner.style.phobos_naming_convention",
							"dscanner.style.undocumented_declaration",
							"dscanner.suspicious.auto_ref_assignment",
							"dscanner.suspicious.catch_em_all",
							"dscanner.suspicious.comma_expression",
							"dscanner.suspicious.incomplete_operator_overloading",
							"dscanner.suspicious.incorrect_infinite_range",
							"dscanner.suspicious.label_var_same_name",
							"dscanner.suspicious.length_subtraction",
							"dscanner.suspicious.local_imports",
							"dscanner.suspicious.missing_return",
							"dscanner.suspicious.object_const",
							"dscanner.suspicious.redundant_attributes",
							"dscanner.suspicious.redundant_parens",
							"dscanner.suspicious.static_if_else",
							"dscanner.suspicious.unmodified",
							"dscanner.suspicious.unused_label",
							"dscanner.suspicious.unused_parameter",
							"dscanner.suspicious.unused_variable",
							"dscanner.suspicious.useless_assert",
							"dscanner.unnecessary.duplicate_attribute",
							"dscanner.useless.final",
							"dscanner.useless-initializer",
							"dscanner.vcall_ctor",
							"dscanner.syntax"
						]
					},
					"description": "DScanner warnings to ignore in this project."
				}
			}
		},
		"menus": {
			"explorer/context": [
				{
					"when": "resourceLangId == d",
					"command": "code-d.rdmdCurrent",
					"group": "1_modification"
				}
			],
			"editor/title": [
				{
					"when": "resourceFilename =~ /dub\\.json|dub\\.sdl/",
					"command": "code-d.convertDubRecipe",
					"group": "navigation"
				},
				{
					"when": "resourceFilename == 'dub.json'",
					"command": "dub.openSettingsEditor",
					"group": "navigation"
				},
				{
					"when": "resourceScheme == dubsettings",
					"command": "dub.closeSettingsEditor",
					"group": "navigation"
				}
			],
			"view/title": [
				{
					"command": "code-d.reloadImports",
					"when": "view == dubDependencies",
					"group": "navigation"
				},
				{
					"command": "code-d.addDependency",
					"when": "view == dubDependencies",
					"group": "navigation"
				}
			],
			"view/item/context": [
				{
					"command": "code-d.removeDependency",
					"when": "view == dubDependencies && viewItem == root"
				},
				{
					"command": "code-d.updateDependency",
					"when": "view == dubDependencies && viewItem == root"
				}
			],
			"commandPalette": [
				{
					"command": "code-d.addDependency",
					"when": "false"
				},
				{
					"command": "code-d.removeDependency",
					"when": "false"
				},
				{
					"command": "code-d.updateDependency",
					"when": "false"
				},
				{
					"command": "code-d.viewDubPackage",
					"when": "false"
				},
				{
					"command": "code-d.uploadSelection",
					"when": "editorHasSelection"
				},
				{
					"command": "code-d.convertDubRecipe",
					"when": "resourceFilename =~ /dub\\.json|dub\\.sdl/"
				}
			]
		},
		"views": {
			"explorer": [
				{
					"id": "dubDependencies",
					"name": "Dub Dependencies"
				}
			]
		},
		"commands": [
			{
				"command": "code-d.addDependency",
				"title": "Add Dependency",
				"category": "code-d",
				"icon": {
					"light": "images/adddep-light.svg",
					"dark": "images/adddep-dark.svg"
				}
			},
			{
				"command": "code-d.removeDependency",
				"title": "Remove",
				"category": "code-d"
			},
			{
				"command": "code-d.updateDependency",
				"title": "Update to latest version",
				"category": "code-d"
			},
			{
				"command": "code-d.viewDubPackage",
				"title": "View Dub Package",
				"category": "code-d"
			},
			{
				"command": "code-d.switchConfiguration",
				"title": "Switch Configuration",
				"category": "code-d"
			},
			{
				"command": "code-d.switchArchType",
				"title": "Switch Arch Type",
				"category": "code-d"
			},
			{
				"command": "code-d.switchBuildType",
				"title": "Switch Build Type",
				"category": "code-d"
			},
			{
				"command": "code-d.switchCompiler",
				"title": "Switch Compiler",
				"category": "code-d"
			},
			{
				"command": "code-d.killServer",
				"title": "Kill DCD Server",
				"category": "code-d"
			},
			{
				"command": "code-d.restartServer",
				"title": "Restart DCD Server",
				"category": "code-d"
			},
			{
				"command": "code-d.reloadImports",
				"title": "Reload import paths",
				"category": "code-d",
				"icon": {
					"light": "images/refresh-light.svg",
					"dark": "images/refresh-dark.svg"
				}
			},
			{
				"command": "code-d.uploadSelection",
				"title": "Upload selection to dpaste.com",
				"category": "code-d"
			},
			{
				"command": "code-d.insertDscanner",
				"title": "Insert default dscanner.ini content",
				"category": "code-d"
			},
			{
				"command": "code-d.rdmdCurrent",
				"title": "Run document using rdmd",
				"category": "code-d"
			},
			{
				"command": "code-d.generateCoverageReport",
				"title": "Generate coverage report",
				"category": "code-d"
			},
			{
				"command": "code-d.showGCCalls",
				"title": "Show GC calls from profilegc.log",
				"category": "code-d"
			},
			{
				"command": "dub.openSettingsEditor",
				"title": "Open project settings",
				"category": "code-d",
				"icon": {
					"light": "./images/edit-dub-inverse.svg",
					"dark": "./images/edit-dub.svg"
				}
			},
			{
				"command": "dub.closeSettingsEditor",
				"title": "Close project settings",
				"category": "code-d",
				"icon": {
					"light": "./images/edit-source-inverse.svg",
					"dark": "./images/edit-source.svg"
				}
			},
			{
				"command": "code-d.createProject",
				"title": "Create new Project",
				"category": "code-d"
			},
			{
				"command": "code-d.sortImports",
				"title": "Sort Active Import Block",
				"category": "code-d"
			},
			{
				"command": "code-d.implementMethods",
				"title": "Implement selected interface/base class",
				"category": "code-d"
			},
			{
				"command": "code-d.ignoreDscannerKey",
				"title": "Ignore DScanner warnings",
				"category": "code-d"
			},
			{
				"command": "code-d.searchDocs",
				"title": "Search dpldocs for Phobos & Dependency documentation",
				"category": "code-d"
			},
			{
				"command": "code-d.convertDubRecipe",
				"title": "Convert between dub.json/dub.sdl",
				"category": "code-d",
				"icon": {
					"light": "./images/dub-convert-inverse.svg",
					"dark": "./images/dub-convert.svg"
				}
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "dub.json",
				"url": "./json-validation/dub.schema.json"
			}
		],
		"taskDefinitions": [
			{
				"type": "dub",
				"properties": {
					"run": {
						"type": "boolean",
						"default": false,
						"description": "Whether to run the executable when running the task or not."
					},
					"test": {
						"type": "boolean",
						"default": false,
						"description": "Build and run a test build."
					},
					"root": {
						"type": "string",
						"description": "Path to an alternative root to not compile the workspace relative to cwd."
					},
					"cwd": {
						"type": "string",
						"description": "Working directory where dub should be run relative to the workspace."
					},
					"overrides": {
						"type": "array",
						"items": {
							"type": "string",
							"pattern": "^[-a-zA-Z0-9_.]+/.+$"
						},
						"description": "--override-config values in format <dependency>/<config> to override the configuration for a certain dependency. For example \"vibe-d:tls/openssl-1.1\""
					},
					"force": {
						"type": "boolean",
						"default": false,
						"description": "Set to true to add the --force flag to dub."
					},
					"compiler": {
						"type": "string",
						"description": "Common name or path to compiler executable"
					},
					"archType": {
						"type": "string",
						"description": "Arch type to compile with"
					},
					"buildType": {
						"type": "string",
						"description": "Build type to compile with"
					},
					"configuration": {
						"type": "string",
						"description": "Configuration to run"
					},
					"args": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Extra arguments to pass to dub"
					}
				}
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "tsc -p ./",
		"compile": "tsc -watch -p ./",
		"postinstall": "node ./node_modules/vscode/bin/install"
	},
	"dependencies": {
		"request": "^2.88.0",
		"request-progress": "^3.0.0",
		"jsonc-parser": "^2.0.2",
		"adm-zip": "^0.4.11",
		"async": "^2.6.1",
		"ncp": "^2.0.0",
		"rmdir": "^1.2.0",
		"line-by-line": "^0.1.6",
		"vscode-languageclient": "^5.1.0-next",
		"mkdirp": "^0.5.1",
		"opn": "^5.4.0",
		"rimraf": "^2.6.2",
		"jsdom": "^12.0.0",
		"xmldom": "^0.1.27"
	},
	"devDependencies": {
		"@types/jsdom": "^11.12.0",
		"@types/mocha": "^5.2.4",
		"@types/node": "^10.11.2",
		"@types/parse5": "^5.0.0",
		"mocha": "^5.2.0",
		"typescript": "^2.9.2",
		"vscode": "^1.1.18"
	}
}